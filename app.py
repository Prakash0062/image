import os
import tempfile
from PIL import Image
import pytesseract
from gtts import gTTS
from langdetect import detect
import streamlit as st
from functools import lru_cache

# Check if Hindi is installed
def is_language_installed(lang_code='hin'):
    tessdata_dir = os.environ.get('TESSDATA_PREFIX', '/usr/share/tesseract-ocr/4.00/tessdata')
    return os.path.exists(os.path.join(tessdata_dir, f'{lang_code}.traineddata'))

hindi_installed = is_language_installed('hin')

# Braille character map (same as yours, truncated for brevity here)
braille_map = {
    'a': '‚†Å', 'b': '‚†É', 'c': '‚†â', 'd': '‚†ô', 'e': '‚†ë',
    'f': '‚†ã', 'g': '‚†õ', 'h': '‚†ì', 'i': '‚†ä', 'j': '‚†ö',
    'k': '‚†Ö', 'l': '‚†á', 'm': '‚†ç', 'n': '‚†ù', 'o': '‚†ï',
    'p': '‚†è', 'q': '‚†ü', 'r': '‚†ó', 's': '‚†é', 't': '‚†û',
    'u': '‚†•', 'v': '‚†ß', 'w': '‚†∫', 'x': '‚†≠', 'y': '‚†Ω',
    'z': '‚†µ',
    ' ': ' ', '\n': '\n', ',': '‚†Ç', '.': '‚†≤', '?': '‚†¶', '!': '‚†ñ',

    # Hindi vowels, consonants, and other signs
    "‡§Ö": "‚†Å", "‡§Ü": "‚†°", "‡§á": "‚†ä", "‡§à": "‚†í", "‡§â": "‚†•",
    "‡§ä": "‚†≥", "‡§è": "‚†ë", "‡§ê": "‚†£", "‡§ì": "‚†ï", "‡§î": "‚†∑",
    "‡§ã": "‚†ó", "‡§ï": "‚†Ö", "‡§ñ": "‚†©", "‡§ó": "‚†õ", "‡§ò": "‚†£",
    "‡§ô": "‚†ª", "‡§ö": "‚†â", "‡§õ": "‚†°", "‡§ú": "‚†ö", "‡§ù": "‚†í",
    "‡§û": "‚†±", "‡§ü": "‚†û", "‡§†": "‚†æ", "‡§°": "‚†ô", "‡§¢": "‚†π",
    "‡§£": "‚†ª", "‡§§": "‚†û", "‡§•": "‚†Æ", "‡§¶": "‚†ô", "‡§ß": "‚†π",
    "‡§®": "‚†ù", "‡§™": "‚†è", "‡§´": "‚†ü", "‡§¨": "‚†É", "‡§≠": "‚†´",
    "‡§Æ": "‚†ç", "‡§Ø": "‚†Ω", "‡§∞": "‚†ó", "‡§≤": "‚†á", "‡§µ": "‚†ß",
    "‡§∂": "‚†±", "‡§∑": "‚†≥", "‡§∏": "‚†é", "‡§π": "‚†ì", "‡§ï‡•ç‡§∑": "‚†ü",
    "‡§ú‡•ç‡§û": "‚†ª", "‡§°‡§º": "‚†ö", "‡§¢‡§º": "‚†ö", "‡§´‡§º": "‚†ã", "‡§ú‡§º": "‚†µ",
    "‡§ó‡•ç‡§Ø": "‚†õ‚†Ω", "‡§§‡•ç‡§∞": "‚†û‚†ó", "‡§∂‡•ç‡§∞": "‚†±‚†ó",

    "‡§æ": "‚†°", "‡§ø": "‚†ä", "‡•Ä": "‚†í", "‡•Å": "‚†•", "‡•Ç": "‚†≥",
    "‡•á": "‚†ë", "‡•à": "‚†£", "‡•ã": "‚†ï", "‡•å": "‚†∑", "‡•É": "‚†ó",

    "‡•ç": "‚†Ñ", "‡§Ç": "‚†à", "‡§É": "‚†ò", "‡§Å": "‚†®",

    "‡•¶": "‚†ö", "‡•ß": "‚†Å", "‡•®": "‚†É", "‡•©": "‚†â", "‡•™": "‚†ô",
    "‡•´": "‚†ë", "‡•¨": "‚†ã", "‡•≠": "‚†õ", "‡•Æ": "‚†ì", "‡•Ø": "‚†ä",

    "‡•§": "‚†≤", ",": "‚†Ç", "?": "‚†¶", "!": "‚†ñ", "\"": "‚†∂",
    "'": "‚†Ñ", ";": "‚†Ü", ":": "‚†í", ".": "‚†≤", "-": "‚†§",
    "(": "‚†∂", ")": "‚†∂", "/": "‚†å",

    "A": "‚†Å", "B": "‚†É", "C": "‚†â", "D": "‚†ô", "E": "‚†ë",
    "F": "‚†ã", "G": "‚†õ", "H": "‚†ì", "I": "‚†ä", "J": "‚†ö",
    "K": "‚†Ö", "L": "‚†á", "M": "‚†ç", "N": "‚†ù", "O": "‚†ï",
    "P": "‚†è", "Q": "‚†ü", "R": "‚†ó", "S": "‚†é", "T": "‚†û",
    "U": "‚†•", "V": "‚†ß", "W": "‚†∫", "X": "‚†≠", "Y": "‚†Ω", "Z": "‚†µ",

}

@lru_cache(maxsize=128)
def text_to_braille(text):
    return ''.join(braille_map.get(ch, ' ') for ch in text)

def resize_image(image, max_size=(1024, 1024)):
    image.thumbnail(max_size, Image.Resampling.LANCZOS)
    return image

def main():
    st.title("üñºÔ∏è Image Text Assistive - Hindi & English OCR")

    uploaded_file = st.file_uploader("üì§ Upload an image", type=["png", "jpg", "jpeg"])

    if uploaded_file is not None:
        img = Image.open(uploaded_file).convert("RGB")
        img = resize_image(img)
        st.image(img, caption="Uploaded Image", use_column_width=True)

        # Set OCR languages based on availability
        lang_config = 'eng+hin' if hindi_installed else 'eng'

        extracted_text = pytesseract.image_to_string(img, lang=lang_config)

        if not hindi_installed:
            st.warning("‚ö†Ô∏è Hindi OCR is not enabled. Only English text will be extracted.\n\n"
                       "To enable Hindi, install it using:\n\n```sudo apt install tesseract-ocr-hin```")

        # Detect language
        try:
            detected_lang = detect(extracted_text)
        except:
            detected_lang = 'en'

        gtts_lang = 'hi' if detected_lang == 'hi' else 'en'

        # Braille conversion
        braille_body = text_to_braille(extracted_text)
        braille_prefix = '‚†∞‚†ì ' if gtts_lang == 'hi' else '‚†∞‚†ë '
        braille_text = braille_prefix + braille_body

        st.subheader("üìù Extracted Text")
        st.write(extracted_text)

        st.subheader("‚†É Braille Translation")
        st.text(braille_text)

        # Text to Speech
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_audio:
            tts = gTTS(text=extracted_text, lang=gtts_lang)
            tts.save(tmp_audio.name)
            st.audio(tmp_audio.name, format="audio/mp3")

if __name__ == "__main__":
    main()
